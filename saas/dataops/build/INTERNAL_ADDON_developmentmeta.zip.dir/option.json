{"REVISION":23,"addons":[{"gmtModified":1670231782000,"addonConfig":"{}","namespaceId":"sreworks","appId":"dataops","addonType":"RESOURCE_ADDON","addonVersion":"_","name":"system-env","id":53,"gmtCreate":1666577123000,"addonId":"system-env","stageId":"dev"},{"gmtModified":1670231782000,"addonConfig":"{}","namespaceId":"sreworks","appId":"dataops","addonType":"INTERNAL_ADDON","addonVersion":"_","name":"productopsv2","id":18,"gmtCreate":1645702680000,"addonId":"productopsv2","stageId":"dev"}],"helms":[{"componentType":"HELM","gmtModified":1672993624000,"helmExt":"{\"defaultValuesYaml\":\"image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/logstash\\nimageTag: 7.10.2\\nlogstashConfig:\\n  logstash.yml: |\\n    http.host: 0.0.0.0\\n    xpack.monitoring.enabled: true\\n    xpack.monitoring.elasticsearch.username: 'elastic'\\n    xpack.monitoring.elasticsearch.password: 'sreworkses123.'\\n    xpack.monitoring.elasticsearch.hosts: [\\\"prod-dataops-elasticsearch-master.sreworks-dataops:9200\\\"]\\nlogstashPipeline:\\n  logstash.conf: |\\n    input {\\n      elasticsearch {\\n        hosts => \\\"prod-dataops-elasticsearch-master.sreworks-dataops:9200\\\"\\n        user => \\\"elastic\\\"\\n        password => \\\"sreworkses123.\\\"\\n        index => \\\"metricbeat\\\"\\n        query => '{\\\"query\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":\\\"now-1m/m\\\",\\\"lt\\\":\\\"now/m\\\"}}},{\\\"query_string\\\":{\\\"query\\\":\\\"metricset.name:json\\\"}},{\\\"exists\\\":{\\\"field\\\":\\\"http\\\"}}]}},\\\"sort\\\":[\\\"service.address\\\"]}'\\n        schedule => \\\"* * * * *\\\"\\n        scroll => \\\"5m\\\"\\n        size => 10000\\n      }\\n    }\\n    output {\\n      kafka {\\n        bootstrap_servers => \\\"prod-dataops-kafka.sreworks-dataops.svc.cluster.local:9092\\\"\\n        codec => json\\n        topic_id => \\\"sreworks-telemetry-metric\\\"\\n      }\\n    }\\nservice:\\n  loadBalancerIP: \\\"\\\"\\n  ports:\\n  - name: beats\\n    port: 5044\\n    protocol: TCP\\n    targetPort: 5044\\n  - name: http\\n    port: 8080\\n    protocol: TCP\\n    targetPort: 8080\\n  type: ClusterIP\\nvolumeClaimTemplate:\\n  accessModes:\\n  - ReadWriteOnce\\n  resources:\\n    requests:\\n      storage: 50Gi\\n  storageClassName: \\\"{{ Global.STORAGE_CLASS }}\\\"\",\"repo\":{\"repoPath\":\"saas/dataops/api/logstash/logstash-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1670637111000,"packageType":"REPO","helmPackageId":"logstash","namespaceId":"sreworks","appId":"dataops","name":"logstash","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/logstash/logstash-chart\n  branch: master\n","id":29,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"global:\\n  storageClass: \\\"{{ Global.STORAGE_CLASS }}\\\"\\n\\nimage:\\n  registry: sreworks-registry.cn-beijing.cr.aliyuncs.com\\n  repository: hub/kafka\\n\\nzookeeper:\\n  persistence:\\n    size: 20Gi\\n  image:\\n    registry: sreworks-registry.cn-beijing.cr.aliyuncs.com\\n    repository: hub/zookeeper\\n\\npersistence:\\n  size: 20Gi\",\"repo\":{\"repoPath\":\"saas/dataops/api/kafka/kafka-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1669043349000,"packageType":"REPO","helmPackageId":"kafka","namespaceId":"sreworks","appId":"dataops","name":"kafka","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/kafka/kafka-chart\n  branch: master\n","id":28,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"global:\\n  # zone: cluster.local (use only if your DNS server doesn't live in the same zone as kubecost)\\n  prometheus:\\n    enabled: false\\n    fqdn: http://{{ Global.DATA_PROM_HOST}}:{{ Global.DATA_PROM_PORT }}\\n\\n  thanos:\\n    enabled: false\\n\\n  grafana:\\n    enabled: false\\n    domainName: prod-dataops-grafana.sreworks-dataops\\n    proxy: false\\n\\n  notifications:\\n    alertmanager:\\n      enabled: false\\n      fqdn: http://{{ Global.DATA_PROM_HOST}}:{{ Global.DATA_PROM_PORT }}\\n\\nkubecostToken: \\\"MzEyMTg5Mzk3QHFxLmNvbQ==xm343yadf98\\\"\\n\\nkubecostFrontend:\\n  image: \\\"sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kubecost1/frontend\\\"\\n  imagePullPolicy: Always\\n  resources:\\n    requests:\\n      cpu: \\\"10m\\\"\\n      memory: \\\"55Mi\\\"\\n    #limits:\\n    #  cpu: \\\"100m\\\"\\n    #  memory: \\\"256Mi\\\"\\n#  tls:\\n#    enable: true\\n#    secretName:\\n\\nkubecost:\\n  disableServer: false\\n  image: \\\"sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kubecost1/server\\\"\\n  resources:\\n    requests:\\n      cpu: \\\"100m\\\"\\n      memory: \\\"55Mi\\\"\\n    #limits:\\n    #  cpu: \\\"100m\\\"\\n    #  memory: \\\"256Mi\\\"\\n\\nkubecostModel:\\n  image: \\\"sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kubecost1/cost-model\\\"\\n  imagePullPolicy: Always\\n  resources:\\n    requests:\\n      cpu: \\\"200m\\\"\\n      memory: \\\"55Mi\\\"\\n    #limits:\\n    #  cpu: \\\"800m\\\"\\n    #  memory: \\\"256Mi\\\"\\n\\ningress:\\n  enabled: false\\n  className: nginx\\n  annotations:\\n    # kubernetes.io/ingress.class: nginx\\n    # kubernetes.io/tls-acme: \\\"true\\\"\\n  paths: [\\\"/\\\"] # There's no need to route specifically to the pods-- we have an nginx deployed that handles routing\\n  pathType: ImplementationSpecific\\n  hosts:\\n    - kubecost-cost-analyzer.c38cca9c474484bdc9873f44f733d8bcd.cn-beijing.alicontainer.com\\n  tls: []\\n  #  - secretName: cost-analyzer-tls\\n  #    hosts:\\n  #      - cost-analyzer.local\\n\\npersistentVolume:\\n  size: 100Gi\\n  dbSize: 100.0Gi\\n  enabled: true\\n  storageClass: \\\"{{ Global.STORAGE_CLASS }}\\\"\\n  accessModes:\\n    - ReadWriteOnce\\n\\nservice:\\n  type: ClusterIP\\n  port: 9090\\n  targetPort: 9090\\n  # nodePort:\\n  labels: {}\\n  annotations: {}\\n\\nprometheus:\\n  kube-state-metrics:\\n    disabled: false\\n    image:\\n      repository: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kube-state-metrics\\n      tag: v1.9.8\\n      pullPolicy: Always\\n  server:\\n    resources: {}\\n    # limits:\\n    #   cpu: 500m\\n    #   memory: 512Mi\\n    # requests:\\n    #   cpu: 500m\\n    #   memory: 512Mi\\n    global:\\n      scrape_interval: 1m\\n      scrape_timeout: 10s\\n      evaluation_interval: 1m\\n      external_labels:\\n        cluster_id: cluster123 # Each cluster should have a unique ID\\n    persistentVolume:\\n      size: 100Gi\\n      enabled: true\\n      storageClass: \\\"{{ Global.STORAGE_CLASS }}\\\"\\n      accessModes:\\n        - ReadWriteOnce\\n    extraArgs:\\n      query.max-concurrency: 1\\n      query.max-samples: 100000000\\n    tolerations: []\\n  alertmanager:\\n    enabled: false\\n    persistentVolume:\\n      enabled: true\\n  nodeExporter:\\n    enabled: true\\n    service:\\n        annotations:\\n          prometheus.io/scrape: \\\"true\\\"\\n        # Exposed as a headless service:\\n        # https://kubernetes.io/docs/concepts/services-networking/service/#headless-services\\n        clusterIP: None\\n        hostPort: 9010\\n        servicePort: 9010\\n        type: ClusterIP\\n  pushgateway:\\n    enabled: false\\n    persistentVolume:\\n      enabled: true\\n\\nnetworkCosts:\\n  enabled: false\\n  podSecurityPolicy:\\n    enabled: false\\n  image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kubecost1/kubecost-network-costs\\n  tag: v15.7\\n  imagePullPolicy: Always\\n  prometheusScrape: false\\n  trafficLogging: true\\n  port: 3001\\n  resources: {}\\n    #requests:\\n    #  cpu: \\\"50m\\\"\\n    #  memory: \\\"20Mi\\\"\\n\\n\\nkubecostDeployment:\\n  replicas: 1\\n\\nclusterController:\\n  enabled: false\\n  image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kubecost1/cluster-controller\\n  tag: v0.0.2\\n  imagePullPolicy: Always\\n\\n\\ngrafana:\\n  sidecar:\\n    dashboards:\\n      enabled: true\\n      label: kubecost_grafana_dashboard\\n    datasources:\\n      enabled: false\\n  grafana.ini:\\n    server:\\n      root_url: \\\"%(protocol)s://%(domain)s:%(http_port)s/grafana\\\"\\n\\nkubecostProductConfigs:\\n  clusterName: \\\"cluster123\\\"\\n  currencyCode: \\\"CNY\\\" \\n\",\"repo\":{\"repoPath\":\"saas/dataops/api/kubecost/cost-analyzer\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1668612246000,"packageType":"REPO","helmPackageId":"kubecost","namespaceId":"sreworks","appId":"dataops","name":"kubecost","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/kubecost/cost-analyzer\n  branch: master\n","id":27,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"rbac:\\n  create: true\\n\\npodSecurityPolicy:\\n  enabled: false\\n\\nserviceAccounts:\\n  alertmanager:\\n    create: true\\n    name:\\n    annotations: {}\\n  nodeExporter:\\n    create: true\\n    name:\\n    annotations: {}\\n  pushgateway:\\n    create: true\\n    name:\\n    annotations: {}\\n  server:\\n    create: true\\n    name:\\n    annotations: {}\\n\\nalertmanager:\\n  enabled: false\\n\\nconfigmapReload:\\n  prometheus:\\n    enabled: false\\n  alertmanager:\\n    enabled: false\\n\\nkubeStateMetrics:\\n  enabled: false\\n\\nnodeExporter:\\n  enabled: false\\n\\n\\nserver:\\n  enabled: true\\n  persistentVolume:\\n    enabled: true\\n    accessModes:\\n      - ReadWriteOnce\\n    storageClass: \\\"{{ Global.STORAGE_CLASS }}\\\"\\n    existingClaim: \\\"\\\"\\n    mountPath: /data\\n    size: 20Gi\\n\\npushgateway:\\n  enabled: false\\n\\nserverFiles:\\n  recording_rules.yml:\\n    groups:\\n    - name: CPU\\n      rules:\\n      - expr: sum(rate(container_cpu_usage_seconds_total{container_name!=\\\"\\\"}[5m]))\\n        record: cluster:cpu_usage:rate5m\\n      - expr: rate(container_cpu_usage_seconds_total{container_name!=\\\"\\\"}[5m])\\n        record: cluster:cpu_usage_nosum:rate5m\\n      - expr: avg(irate(container_cpu_usage_seconds_total{container_name!=\\\"POD\\\", container_name!=\\\"\\\"}[5m])) by (container_name,pod_name,namespace)\\n        record: kubecost_container_cpu_usage_irate\\n      - expr: sum(container_memory_working_set_bytes{container_name!=\\\"POD\\\",container_name!=\\\"\\\"}) by (container_name,pod_name,namespace)\\n        record: kubecost_container_memory_working_set_bytes\\n      - expr: sum(container_memory_working_set_bytes{container_name!=\\\"POD\\\",container_name!=\\\"\\\"})\\n        record: kubecost_cluster_memory_working_set_bytes\\n    - name: Savings\\n      rules:\\n      - expr: sum(avg(kube_pod_owner{owner_kind!=\\\"DaemonSet\\\"}) by (pod) * sum(container_cpu_allocation) by (pod))\\n        labels:\\n          daemonset: \\\"false\\\"\\n        record: kubecost_savings_cpu_allocation\\n      - expr: sum(avg(kube_pod_owner{owner_kind=\\\"DaemonSet\\\"}) by (pod) * sum(container_cpu_allocation) by (pod)) / sum(kube_node_info)\\n        labels:\\n          daemonset: \\\"true\\\"\\n        record: kubecost_savings_cpu_allocation\\n      - expr: sum(avg(kube_pod_owner{owner_kind!=\\\"DaemonSet\\\"}) by (pod) * sum(container_memory_allocation_bytes) by (pod))\\n        labels:\\n          daemonset: \\\"false\\\"\\n        record: kubecost_savings_memory_allocation_bytes\\n      - expr: sum(avg(kube_pod_owner{owner_kind=\\\"DaemonSet\\\"}) by (pod) * sum(container_memory_allocation_bytes) by (pod)) / sum(kube_node_info)\\n        labels:\\n          daemonset: \\\"true\\\"\\n        record: kubecost_savings_memory_allocation_bytes\\n      - expr: label_replace(sum(kube_pod_status_phase{phase=\\\"Running\\\",namespace!=\\\"kube-system\\\"} > 0) by (pod, namespace), \\\"pod_name\\\", \\\"$1\\\", \\\"pod\\\", \\\"(.+)\\\")\\n        record: kubecost_savings_running_pods\\n      - expr: sum(rate(container_cpu_usage_seconds_total{container_name!=\\\"\\\",container_name!=\\\"POD\\\",instance!=\\\"\\\"}[5m])) by (namespace, pod_name, container_name, instance)\\n        record: kubecost_savings_container_cpu_usage_seconds\\n      - expr: sum(container_memory_working_set_bytes{container_name!=\\\"\\\",container_name!=\\\"POD\\\",instance!=\\\"\\\"}) by (namespace, pod_name, container_name, instance)\\n        record: kubecost_savings_container_memory_usage_bytes\\n      - expr: avg(sum(kube_pod_container_resource_requests{resource=\\\"cpu\\\", unit=\\\"core\\\", namespace!=\\\"kube-system\\\"}) by (pod, namespace, instance)) by (pod, namespace)\\n        record: kubecost_savings_pod_requests_cpu_cores\\n      - expr: avg(sum(kube_pod_container_resource_requests{resource=\\\"memory\\\", unit=\\\"byte\\\", namespace!=\\\"kube-system\\\"}) by (pod, namespace, instance)) by (pod, namespace)\\n        record: kubecost_savings_pod_requests_memory_bytes\\n\\n  prometheus.yml:\\n    rule_files:\\n      - /etc/config/recording_rules.yml\\n      - /etc/config/alerting_rules.yml\\n\\n    scrape_configs:\\n      - job_name: prometheus\\n        static_configs:\\n          - targets:\\n            - localhost:9090\\n      - job_name: kubernetes-pods\\n        kubernetes_sd_configs:\\n        - role: pod\\n        relabel_configs:\\n        - action: keep\\n          regex: true\\n          source_labels:\\n          - __meta_kubernetes_pod_annotation_prometheus_io_scrape\\n        - action: replace\\n          regex: (.+)\\n          source_labels:\\n          - __meta_kubernetes_pod_annotation_prometheus_io_path\\n          target_label: __metrics_path__\\n        - action: replace\\n          regex: ([^:]+)(?::\\\\d+)?;(\\\\d+)\\n          replacement: $1:$2\\n          source_labels:\\n          - __address__\\n          - __meta_kubernetes_pod_annotation_prometheus_io_port\\n          target_label: __address__\\n        - action: labelmap\\n          regex: __meta_kubernetes_pod_label_(.+)\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_namespace\\n          target_label: kubernetes_namespace\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_pod_name\\n          target_label: kubernetes_pod_name\\n      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\n        job_name: kubernetes-nodes-cadvisor\\n        kubernetes_sd_configs:\\n        - role: node\\n        metric_relabel_configs:\\n        - action: keep\\n          regex: (container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_errors_total|container_network_transmit_errors_total|container_network_receive_packets_dropped_total|container_network_transmit_packets_dropped_total|container_memory_usage_bytes|container_cpu_cfs_throttled_periods_total|container_cpu_cfs_periods_total|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_periods_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_throttled_periods_total|container_cpu_cfs_periods_total|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_usage_bytes|container_fs_limit_bytes|container_spec_cpu_shares|container_spec_memory_limit_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_fs_reads_bytes_total|container_network_receive_bytes_total|container_fs_writes_bytes_total|container_fs_reads_bytes_total|cadvisor_version_info)\\n          source_labels:\\n          - __name__\\n        - action: replace\\n          regex: (.+)\\n          source_labels:\\n          - container\\n          target_label: container_name\\n        - action: replace\\n          regex: (.+)\\n          source_labels:\\n          - pod\\n          target_label: pod_name\\n        relabel_configs:\\n        - action: labelmap\\n          regex: __meta_kubernetes_node_label_(.+)\\n        - replacement: kubernetes.default.svc:443\\n          target_label: __address__\\n        - regex: (.+)\\n          replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\\n          source_labels:\\n          - __meta_kubernetes_node_name\\n          target_label: __metrics_path__\\n        scheme: https\\n        tls_config:\\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n          insecure_skip_verify: true\\n      - job_name: kubernetes-service-endpoints\\n        kubernetes_sd_configs:\\n        - role: endpoints\\n        metric_relabel_configs:\\n        - action: keep\\n          regex: (container_gpu_allocation|container_cpu_allocation|container_cpu_usage_seconds_total|container_fs_limit_bytes|container_memory_allocation_bytes|container_memory_usage_bytes|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|deployment_match_labels|kube_deployment_spec_replicas|kube_deployment_status_replicas_available|kube_job_status_failed|kube_namespace_annotations|kube_namespace_labels|kube_node_info|kube_node_labels|kube_node_status_capacity|kube_node_status_capacity_cpu_cores|kube_node_status_capacity_memory_bytes|kube_node_status_condition|kube_persistentvolume_capacity_bytes|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_resource_requests_storage_bytes|container_memory_allocation_bytes|kube_pod_container_resource_limits|kube_pod_container_resource_limits_cpu_cores|kube_pod_container_resource_limits_memory_bytes|kube_pod_container_resource_requests_cpu_cores|kube_pod_container_resource_requests_cpu_cores|container_cpu_usage_seconds_total|kube_pod_container_resource_requests_memory_bytes|kube_pod_container_resource_requests_memory_bytes|kube_pod_container_resource_requests|kube_pod_container_status_restarts_total|kube_pod_container_status_running|kube_pod_container_status_terminated_reason|kube_pod_labels|kube_pod_owner|kube_pod_status_phase|kubecost_cluster_memory_working_set_bytes|kubecost_pod_network_egress_bytes_total|node_cpu_hourly_cost|node_cpu_seconds_total|node_disk_reads_completed|node_disk_reads_completed_total|node_disk_writes_completed|node_disk_writes_completed_total|node_filesystem_device_error|node_gpu_hourly_cost|node_memory_Buffers_bytes|node_memory_Cached_bytes|node_memory_MemAvailable_bytes|node_memory_MemFree_bytes|node_memory_MemTotal_bytes|node_network_transmit_bytes_total|node_ram_hourly_cost|pod_pvc_allocation|pv_hourly_cost|service_selector_labels|statefulSet_match_labels|up|kube_node_status_allocatable|kube_node_status_allocatable_cpu_cores|kube_node_status_allocatable_memory_bytes|container_fs_writes_bytes_total|kube_deployment_status_replicas|kube_statefulset_replicas|kube_daemonset_status_desired_number_scheduled|kube_deployment_status_replicas_available|kube_statefulset_status_replicas|kube_daemonset_status_number_ready|kube_deployment_status_replicas|kube_statefulset_replicas|kube_daemonset_status_desired_number_scheduled|kube_replicaset_owner|kube_pod_container_info|DCGM_FI_DEV_GPU_UTIL)\\n          source_labels:\\n          - __name__\\n        relabel_configs:\\n        - action: keep\\n          regex: true\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_scrape\\n        - action: replace\\n          regex: (https?)\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_scheme\\n          target_label: __scheme__\\n        - action: replace\\n          regex: (.+)\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_path\\n          target_label: __metrics_path__\\n        - action: replace\\n          regex: ([^:]+)(?::\\\\d+)?;(\\\\d+)\\n          replacement: $1:$2\\n          source_labels:\\n          - __address__\\n          - __meta_kubernetes_service_annotation_prometheus_io_port\\n          target_label: __address__\\n        - action: labelmap\\n          regex: __meta_kubernetes_service_label_(.+)\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_namespace\\n          target_label: kubernetes_namespace\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_service_name\\n          target_label: kubernetes_name\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_pod_node_name\\n          target_label: kubernetes_node\\n      - job_name: kubernetes-service-endpoints-slow\\n        kubernetes_sd_configs:\\n        - role: endpoints\\n        relabel_configs:\\n        - action: keep\\n          regex: true\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow\\n        - action: replace\\n          regex: (https?)\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_scheme\\n          target_label: __scheme__\\n        - action: replace\\n          regex: (.+)\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_path\\n          target_label: __metrics_path__\\n        - action: replace\\n          regex: ([^:]+)(?::\\\\d+)?;(\\\\d+)\\n          replacement: $1:$2\\n          source_labels:\\n          - __address__\\n          - __meta_kubernetes_service_annotation_prometheus_io_port\\n          target_label: __address__\\n        - action: labelmap\\n          regex: __meta_kubernetes_service_label_(.+)\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_namespace\\n          target_label: kubernetes_namespace\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_service_name\\n          target_label: kubernetes_name\\n        - action: replace\\n          source_labels:\\n          - __meta_kubernetes_pod_node_name\\n          target_label: kubernetes_node\\n        scrape_interval: 5m\\n        scrape_timeout: 30s\\n      - honor_labels: true\\n        job_name: prometheus-pushgateway\\n        kubernetes_sd_configs:\\n        - role: service\\n        relabel_configs:\\n        - action: keep\\n          regex: pushgateway\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_probe\\n      - job_name: kubernetes-services\\n        kubernetes_sd_configs:\\n        - role: service\\n        metrics_path: /probe\\n        params:\\n          module:\\n          - http_2xx\\n        relabel_configs:\\n        - action: keep\\n          regex: true\\n          source_labels:\\n          - __meta_kubernetes_service_annotation_prometheus_io_probe\\n        - source_labels:\\n          - __address__\\n          target_label: __param_target\\n        - replacement: blackbox\\n          target_label: __address__\\n        - source_labels:\\n          - __param_target\\n          target_label: instance\\n        - action: labelmap\\n          regex: __meta_kubernetes_service_label_(.+)\\n        - source_labels:\\n          - __meta_kubernetes_namespace\\n          target_label: kubernetes_namespace\\n        - source_labels:\\n          - __meta_kubernetes_service_name\\n          target_label: kubernetes_name\\n      - job_name: kubecost\\n        honor_labels: true\\n        scrape_interval: 1m\\n        scrape_timeout: 10s\\n        metrics_path: /metrics\\n        scheme: http\\n        dns_sd_configs:\\n        - names:\\n          - prod-dataops-kubecost-cost-analyzer\\n          type: 'A'\\n          port: 9003\\n      - job_name: kubecost-networking\\n        kubernetes_sd_configs:\\n          - role: pod\\n        relabel_configs:\\n        # Scrape only the the targets matching the following metadata\\n          - source_labels: [__meta_kubernetes_pod_label_app]\\n            action: keep\\n            regex:  prod-dataops-kubecost-network-costs\",\"repo\":{\"repoPath\":\"saas/dataops/api/prometheus/prometheus-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1666169010000,"packageType":"REPO","helmPackageId":"prometheus","namespaceId":"sreworks","appId":"dataops","name":"prometheus","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/prometheus/prometheus-chart\n  branch: master\n","id":26,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"clusterName: '{{ Global.STAGE_ID }}-dataops-elasticsearch'\\nimage: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/elasticsearch\\nimageTag: 7.10.2-with-plugins\\nreplicas: 1\\nminimumMasterNodes: 1\\nclusterHealthCheckEnable: false\\nextraEnvs:\\n  - name: cluster.initial_master_nodes\\n    value: \\\"\\\"\\n  - name: ELASTIC_PASSWORD\\n    value: \\\"{{ Global.DATA_ES_PASSWORD }}\\\"\\n  - name: ELASTIC_USERNAME\\n    value: \\\"{{ Global.DATA_ES_USER }}\\\"\\nesConfig:\\n  elasticsearch.yml: |\\n    xpack.security.enabled: true\\n    discovery.type: single-node\\n    path.data: /usr/share/elasticsearch/data\\n\\nvolumeClaimTemplate:\\n  accessModes:\\n    - ReadWriteOnce\\n  storageClassName: \\\"{{ Global.STORAGE_CLASS }}\\\"\\n  resources:\\n    requests:\\n      storage: 100Gi\",\"repo\":{\"repoPath\":\"saas/dataops/api/elasticsearch/elasticsearch-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996642000,"packageType":"REPO","helmPackageId":"elasticsearch","namespaceId":"sreworks","appId":"dataops","name":"elasticsearch","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/elasticsearch/elasticsearch-chart\n  branch: master\n","id":25,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"image: \\\"sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/filebeat\\\"\\nimageTag: \\\"7.10.2\\\"\\npodAnnotations:\\n  name: filebeat\\nlabels:\\n  k8s-app: filebeat\\nextraEnvs:\\n  - name: NODE_NAME\\n    valueFrom:\\n      fieldRef:\\n        fieldPath: spec.nodeName\\n\\nhostNetworking: true\\n#dnsPolicy: ClusterFirstWithHostNet\\nfilebeatConfig:\\n  filebeat.yml: |\\n    filebeat.autodiscover:\\n      providers:\\n        - type: kubernetes\\n          node: ${NODE_NAME}\\n          resource: pod\\n          scope: node\\n          templates:\\n            - condition:\\n                equals:\\n                  kubernetes.labels.sreworks-telemetry-log: enable\\n              config:\\n                - type: container\\n                  paths:\\n                    - /var/log/containers/*${data.kubernetes.container.id}.log\\n                  multiline:\\n                    type: pattern\\n                    pattern: '^(\\\\[)?20\\\\d{2}-(1[0-2]|0?[1-9])-(0?[1-9]|[1-2]\\\\d|30|31)'\\n                    negate: true\\n                    match: after\\n                  processors:\\n                    - add_kubernetes_metadata:\\n                        host: ${NODE_NAME}\\n                        matchers:\\n                        - logs_path:\\n                            logs_path: \\\"/var/log/containers/\\\"\\n\\n    setup.ilm.enabled: auto\\n    setup.ilm.rollover_alias: \\\"filebeat\\\"\\n    setup.ilm.pattern: \\\"{now/d}-000001\\\"\\n    setup.template.name: \\\"filebeat\\\"\\n    setup.template.pattern: \\\"filebeat-*\\\"\\n\\n    output.elasticsearch:\\n      hosts: '{{ Global.DATA_ES_HOST }}:{{ Global.DATA_ES_PORT }}'\\n      index: \\\"filebeat-%{+yyyy.MM.dd}\\\"\\n      username: \\\"{{ Global.DATA_ES_USER }}\\\"\\n      password: \\\"{{ Global.DATA_ES_PASSWORD }}\\\"\",\"repo\":{\"repoPath\":\"saas/dataops/api/filebeat/filebeat-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996594000,"packageType":"REPO","helmPackageId":"filebeat","namespaceId":"sreworks","appId":"dataops","name":"filebeat","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/filebeat/filebeat-chart\n  branch: master\n","id":24,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"adminUser: admin\\nadminPassword: sreworks123456\\ngrafana.ini:\\n  security:\\n    allow_embedding: true\\n  server:\\n    root_url: /gateway/dataops-grafana/\\n    serve_from_sub_path: true\\n  auth.basic:\\n    enabled: false\\n  auth.proxy:\\n    enabled: true\\n    auto_sign_up: true\\n    enable_login_token: false\\n    ldap_sync_ttl: 60\\n    sync_ttl: 60\\n    header_name: x-auth-user\\n    headers: \\\"Name:x-auth-user Email:x-auth-email-addr\\\"\\n  auth.anonymous:\\n    enabled: false\\nimage: \\n  repository: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/grafana\\n  tag: 7.5.3\\nplugins:\\n  - marcusolsson-json-datasource\\ndatasources:\\n  datasources.yaml:\\n    apiVersion: 1\\n    datasources:\\n    - name: elasticsearch-metricbeat\\n      type: elasticsearch\\n      url: http://{{ Global.DATA_ES_HOST }}:{{ Global.DATA_ES_PORT }}\\n      database: \\\"[metricbeat]*\\\"\\n      basicAuth: true\\n      basicAuthUser: \\\"{{ Global.DATA_ES_USER }}\\\"\\n      basicAuthPassword: \\\"{{ Global.DATA_ES_PASSWORD }}\\\"\\n      access: proxy\\n      isDefault: true\\n      jsonData:\\n        interval: Yearly\\n        timeField: \\\"@timestamp\\\"\\n        esVersion: 70\\n    - name: elasticsearch-filebeat\\n      type: elasticsearch\\n      url: http://{{ Global.DATA_ES_HOST }}:{{ Global.DATA_ES_PORT }}\\n      database: \\\"[filebeat]*\\\"\\n      basicAuth: true\\n      basicAuthUser: \\\"{{ Global.DATA_ES_USER }}\\\"\\n      basicAuthPassword: \\\"{{ Global.DATA_ES_PASSWORD }}\\\"\\n      access: proxy\\n      isDefault: false\\n      jsonData:\\n        interval: Yearly\\n        timeField: \\\"@timestamp\\\"\\n        esVersion: 70\\n        logMessageField: message\\n        logLevelField: fields.level\\n    - name: dataops-prometheus\\n      type: prometheus\\n      access: proxy\\n      httpMethod: POST\\n      url: http://{{ Global.DATA_PROM_HOST}}:{{ Global.DATA_PROM_PORT }}\\n    - name: prometheus-cluster-default\\n      type: prometheus\\n      access: proxy\\n      httpMethod: POST\\n      url: http://{{ Global.DATA_PROM_HOST}}:{{ Global.DATA_PROM_PORT }}\\n    - name: dataset\\n      type: marcusolsson-json-datasource\\n      url: http://{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-dataset.{{ Global.NAMESPACE_ID }}\\n      access: proxy\\n      isDefault: false\\ndashboards:\\n  flink:\\n    flink-dashboard:\\n      file: dashboards/flink-dashboard.json\\n  cost:\\n    cost-dashboard:\\n      file: dashboards/cost-dashboard.json\\ndashboardProviders:\\n  dashboardproviders.yaml:\\n    apiVersion: 1\\n    providers:\\n    - name: 'flink'\\n      orgId: 1\\n      folder: 'sreworks-dataops'\\n      type: file\\n      disableDeletion: false\\n      editable: true\\n      options:\\n        path: /var/lib/grafana/dashboards/flink\\n    - name: 'cost'\\n      orgId: 1\\n      folder: 'sreworks-dataops'\\n      type: file\\n      disableDeletion: false\\n      editable: true\\n      options:\\n        path: /var/lib/grafana/dashboards/cost\",\"repo\":{\"repoPath\":\"saas/dataops/api/grafana/grafana-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996533000,"packageType":"REPO","helmPackageId":"grafana","namespaceId":"sreworks","appId":"dataops","name":"grafana","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/grafana/grafana-chart\n  branch: master\n","id":23,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"ingress:\\n  enabled: false\\nimage: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kibana\\nelasticsearchHosts: \\\"http://{{ Global.DATA_ES_HOST }}:{{ Global.DATA_ES_PORT }}\\\"\\nkibanaConfig:\\n   kibana.yml: |-\\n     elasticsearch.username: {{ Global.DATA_ES_USER }}\\n     elasticsearch.password: {{ Global.DATA_ES_PASSWORD }}\\nresources:\\n  requests:\\n    cpu: \\\"200m\\\"\\n    memory: 512Mi\\n  limits:\\n    cpu: \\\"300m\\\"\\n    memory: 512Mi\",\"repo\":{\"repoPath\":\"saas/dataops/api/kibana/kibana-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996486000,"packageType":"REPO","helmPackageId":"kibana","namespaceId":"sreworks","appId":"dataops","name":"kibana","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/kibana/kibana-chart\n  branch: master\n","id":22,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/metricbeat\\ndaemonset:\\n  annotations:\\n    name: metricbeat\\n  labels: \\n    k8s-app: metricbeat\\n  enabled: true\\n  extraEnvs:\\n    - name: ELASTICSEARCH_HOSTS\\n      value: \\\"{{ Global.STAGE_ID }}-dataops-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local\\\"\\n    - name: NODE_NAME\\n      valueFrom:\\n        fieldRef:\\n          fieldPath: spec.nodeName\\n    - name: NODE_IP\\n      valueFrom:\\n        fieldRef:\\n          fieldPath: status.hostIP\\n  hostNetworking: true\\n  #dnsPolicy: ClusterFirstWithHostNet\\n  metricbeatConfig:\\n    metricbeat.yml: |\\n      metricbeat.modules:\\n      - module: prometheus\\n        period: 1m\\n        hosts: [\\\"{{ Global.DATA_PROM_HOST}}:{{ Global.DATA_PROM_PORT }}\\\"]\\n        metricsets: [\\\"query\\\"]\\n        queries:\\n        - name: \\\"pod_ram_gb_hours_allocation\\\"\\n          path: \\\"/api/v1/query\\\"\\n          params:\\n            query: 'avg(avg_over_time(container_memory_allocation_bytes{container!=\\\"\\\", container!=\\\"POD\\\", node!=\\\"\\\"}[1h])) by (pod, namespace, node) / 1024 / 1024 / 1024 + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!=\\\"\\\",label_labels_appmanager_oam_dev_appInstanceId!=\\\"\\\"})'\\n        - name: \\\"pod_ram_gb_hours_usage_avg\\\"\\n          path: \\\"/api/v1/query\\\"\\n          params:\\n            query: 'avg(avg_over_time(container_memory_working_set_bytes{container!=\\\"\\\", container_name!=\\\"POD\\\", container!=\\\"POD\\\"}[1h])) by (pod, namespace) / 1024 / 1024 / 1024 + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!=\\\"\\\",label_labels_appmanager_oam_dev_appInstanceId!=\\\"\\\"})'\\n        - name: \\\"pod_cpu_core_hours_allocation\\\"\\n          path: \\\"/api/v1/query\\\"\\n          params:\\n            query: 'avg(avg_over_time(container_cpu_allocation{container!=\\\"\\\", container!=\\\"POD\\\", node!=\\\"\\\"}[1h])) by (pod, namespace, node) + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!=\\\"\\\",label_labels_appmanager_oam_dev_appInstanceId!=\\\"\\\"})'\\n        - name: \\\"pod_cpu_core_hours_usage_avg\\\"\\n          path: \\\"/api/v1/query\\\"\\n          params:\\n            query: 'avg(rate(container_cpu_usage_seconds_total{container!=\\\"\\\", container_name!=\\\"POD\\\", container!=\\\"POD\\\"}[1h])) by (pod, namespace) + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!=\\\"\\\",label_labels_appmanager_oam_dev_appInstanceId!=\\\"\\\"})'\\n        - name: \\\"pod_pvc_gb_hours_allocation\\\"\\n          path: \\\"/api/v1/query\\\"\\n          params:\\n            query: 'avg(avg_over_time(pod_pvc_allocation[1h])) by (pod, namespace) / 1024 / 1024 / 1024 + on(pod, namespace) group_left(label_labels_appmanager_oam_dev_appInstanceId, label_labels_appmanager_oam_dev_appId, label_labels_appmanager_oam_dev_appInstanceName, label_labels_appmanager_oam_dev_clusterId, label_labels_appmanager_oam_dev_componentName, label_labels_appmanager_oam_dev_stageId)(0 * kube_pod_labels{uid!=\\\"\\\",label_labels_appmanager_oam_dev_appInstanceId!=\\\"\\\"})'\\n      - module: kubernetes\\n        metricsets:\\n          - container\\n          - node\\n          - pod\\n          - system\\n          - volume\\n        period: 1m\\n        host: \\\"${NODE_NAME}\\\"\\n        hosts: [\\\"https://${NODE_IP}:10250\\\"]\\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\n        ssl.verification_mode: \\\"none\\\"\\n        # If using Red Hat OpenShift remove ssl.verification_mode entry and\\n        # uncomment these settings:\\n        ssl.certificate_authorities:\\n          - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n        processors:\\n        - add_kubernetes_metadata: ~\\n      - module: kubernetes\\n        enabled: true\\n        metricsets:\\n          - event\\n      - module: kubernetes\\n        metricsets:\\n          - proxy\\n        period: 1m\\n        host: ${NODE_NAME}\\n        hosts: [\\\"localhost:10249\\\"]\\n      - module: system\\n        period: 1m\\n        metricsets:\\n          - cpu\\n          - load\\n          - memory\\n          - network\\n          - process\\n          - process_summary\\n        cpu.metrics: [percentages, normalized_percentages]\\n        processes: ['.*']\\n        process.include_top_n:\\n          by_cpu: 5\\n          by_memory: 5\\n      - module: system\\n        period: 1m\\n        metricsets:\\n          - filesystem\\n          - fsstat\\n        processors:\\n        - drop_event.when.regexp:\\n            system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'\\n\\n      metricbeat.autodiscover:\\n        providers:\\n          - type: kubernetes\\n            scope: node\\n            node: ${NODE_NAME}\\n            include_labels: [\\\"sreworks-telemetry-metric\\\"]\\n            resource: pod\\n            templates:\\n              - condition:\\n                  equals:\\n                    kubernetes.labels.sreworks-telemetry-metric: enable\\n                config:\\n                  - module: http\\n                    metricsets:\\n                      - json\\n                    period: 1m\\n                    hosts: [\\\"http://${data.host}:10080\\\"]\\n                    namespace: \\\"${data.kubernetes.namespace}#${data.kubernetes.service.name}\\\"\\n                    path: \\\"/\\\"\\n                    method: \\\"GET\\\"\\n\\n          - type: kubernetes\\n            scope: cluster\\n            node: ${NODE_NAME}\\n            unique: true\\n            include_labels: [\\\"sreworks-prometheus-scrape-metric\\\"]\\n            templates:\\n              - condition:\\n                  equals:\\n                    kubernetes.labels.sreworks-prometheus-scrape-metric: enable\\n                config:\\n                  - module: prometheus\\n                    period: 1m\\n                    hosts: [\\\"${data.host}:${data.port}\\\"]\\n                    metrics_path: /metrics\\n\\n          - type: kubernetes\\n            scope: cluster\\n            node: ${NODE_NAME}\\n            unique: true\\n            templates:\\n              - config:\\n                  - module: kubernetes\\n                    hosts: [\\\"prod-dataops-kubecost-kube-state-metrics.sreworks-dataops.svc.cluster.local:8080\\\"]\\n                    period: 1m\\n                    add_metadata: true\\n                    metricsets:\\n                      - state_node\\n                      - state_deployment\\n                      - state_daemonset\\n                      - state_replicaset\\n                      - state_pod\\n                      - state_container\\n                      - state_cronjob\\n                      - state_resourcequota\\n                      - state_statefulset\\n                      - state_service\\n\\n      processors:\\n        - add_cloud_metadata:\\n      \\n      setup.ilm.enabled: auto\\n      setup.ilm.rollover_alias: \\\"metricbeat\\\"\\n      setup.ilm.pattern: \\\"{now/d}-000001\\\"\\n      setup.template.name: \\\"metricbeat\\\"\\n      setup.template.pattern: \\\"metricbeat-*\\\"\\n\\n      output.elasticsearch:\\n        hosts: '{{ Global.DATA_ES_HOST }}:{{ Global.DATA_ES_PORT }}'\\n        index: \\\"metricbeat-%{+yyyy.MM.dd}\\\"\\n        username: \\\"{{ Global.DATA_ES_USER }}\\\"\\n        password: \\\"{{ Global.DATA_ES_PASSWORD }}\\\"\\n\\n  resources:\\n    requests:\\n      cpu: \\\"100m\\\"\\n      memory: \\\"100Mi\\\"\\n    limits:\\n      cpu: \\\"1000m\\\"\\n      memory: \\\"500Mi\\\"\\ndeployment: \\n  enabled: false\\n\\nkube_state_metrics:\\n  enabled: false\\n\\nclusterRoleRules:\\n- apiGroups: [\\\"\\\"]\\n  resources:\\n  - nodes\\n  - namespaces\\n  - events\\n  - pods\\n  verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\n- apiGroups: [\\\"extensions\\\"]\\n  resources:\\n  - replicasets\\n  verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\n- apiGroups: [\\\"apps\\\"]\\n  resources:\\n  - statefulsets\\n  - deployments\\n  - replicasets\\n  verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\n- apiGroups: [\\\"\\\"]\\n  resources:\\n  - nodes/stats\\n  - nodes\\n  - services\\n  - endpoints\\n  - pods\\n  verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\n- nonResourceURLs:\\n    - \\\"/metrics\\\"\\n  verbs:\\n    - get\\n- apiGroups:\\n    - coordination.k8s.io\\n  resources:\\n    - leases\\n  verbs:\\n    - '*'\\n\\nserviceAccount: \\\"metricbeat-sa\\\" \\n\",\"repo\":{\"repoPath\":\"saas/dataops/api/metricbeat/metricbeat-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996426000,"packageType":"REPO","helmPackageId":"metricbeat","namespaceId":"sreworks","appId":"dataops","name":"metricbeat","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/metricbeat/metricbeat-chart\n  branch: master\n","id":21,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"global:\\n  storageClass: \\\"{{ Global.STORAGE_CLASS }}\\\"\\nprimary:\\n  service:\\n    type: ClusterIP\\n  persistence:\\n    size: 50Gi\\n  extraFlags: '--max-connect-errors=1000 --max_connections=10000'\\nreplication:\\n  enabled: false\\nimage:\\n  registry: sreworks-registry.cn-beijing.cr.aliyuncs.com\\n  repository: mirror/mysql\\n  tag: 8.0.22-debian-10-r44\\nauth:\\n  rootPassword: cb56b5is5e21_c359b42223\",\"repo\":{\"repoPath\":\"saas/dataops/api/mysql/mysql-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996318000,"packageType":"REPO","helmPackageId":"mysql","namespaceId":"sreworks","appId":"dataops","name":"mysql","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/mysql/mysql-chart\n  branch: master\n","id":20,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670931342000,"helmExt":"{\"defaultValuesYaml\":\"oap:\\n  replicas: 1\\n  image:\\n    repository: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/skywalking-oap-server-utc-8\\n    tag: 9.3.0\\n  storageType: elasticsearch\\n  javaOpts: -Xmx1g -Xms1g\\n\\nui:\\n  image:\\n    repository: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/skywalking-ui\\n    tag: 9.3.0 \\n    \\nelasticsearch:\\n  enabled: false\\n  config:\\n    host: '{{ Global.STAGE_ID }}-dataops-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local'\\n    port:\\n      http: 9200\\n    user: \\\"{{ Global.DATA_ES_USER }}\\\"\\n    password: \\\"{{ Global.DATA_ES_PASSWORD }}\\\"\",\"repo\":{\"repoPath\":\"saas/dataops/api/skywalking/skywalking-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996240000,"packageType":"REPO","helmPackageId":"skywalking","namespaceId":"sreworks","appId":"dataops","name":"skywalking","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/skywalking/skywalking-chart\n  branch: master\n","id":19,"stageId":"dev"},{"componentType":"HELM","gmtModified":1670231782000,"helmExt":"{\"defaultValuesYaml\":\"acceptCommunityEditionLicense: true\\nvvp:\\n  registry: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror\\n  persistence:\\n    type: local\\n  blobStorage:\\n    baseUri: s3://vvp\\n    s3:\\n      endpoint: http://sreworks-minio.sreworks:9000\\n  globalDeploymentDefaults: |\\n    spec:\\n      state: RUNNING\\n      template:\\n        spec:\\n          resources:\\n            jobmanager:\\n              cpu: 0.5\\n              memory: 1G\\n            taskmanager:\\n              cpu: 0.5\\n              memory: 1G\\n          flinkConfiguration:\\n            state.backend: filesystem\\n            taskmanager.memory.managed.fraction: 0.0 # no managed memory needed for filesystem statebackend\\n            high-availability: vvp-kubernetes\\n            metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter\\n            execution.checkpointing.interval: 10s\\n            execution.checkpointing.externalized-checkpoint-retention: RETAIN_ON_CANCELLATION\\n  sqlService:\\n    pool:\\n      coreSize: 1\\n      maxSize: 1\\nblobStorageCredentials:\\n  s3:\\n    accessKeyId: \\\"{{ Global.MINIO_ACCESS_KEY }}\\\"\\n    secretAccessKey: \\\"{{ Global.MINIO_SECRET_KEY }}\\\"\\npersistentVolume:\\n  enabled: true\\n  accessModes:\\n    - ReadWriteOnce\\n  annotations: {}\\n  size: 20Gi\\n  storageClass: \\\"{{ Global.STORAGE_CLASS }}\\\"\\n  subPath: ''\",\"repo\":{\"repoPath\":\"saas/dataops/api/ververica-platform/ververica-platform-chart\",\"branch\":\"master\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\"}}","description":"","gmtCreate":1665996176000,"packageType":"REPO","helmPackageId":"ververica-platform","namespaceId":"sreworks","appId":"dataops","name":"ververica-platform","options":"options:\n  repoUrl: null\n  chartName: null\n  chartVersion: null\n  repo: https://code.aliyun.com/sreworks_public/mirror.git\n  ciAccount: public\n  ciToken: public\n  repoPath: saas/dataops/api/ververica-platform/ververica-platform-chart\n  branch: master\n","id":18,"stageId":"dev"}],"microservices":[{"componentType":"K8S_MICROSERVICE","gmtModified":1671009025000,"microServiceId":"pmdb","microServiceExt":"{\"initContainerList\":[{\"dockerfilePath\":\"Dockerfile-db-migration\",\"name\":\"db-migration\",\"repoPath\":\"saas/dataops/api/pmdb\",\"type\":\"shell\"},{\"dockerfilePath\":\"Dockerfile\",\"name\":\"metric-flink\",\"repoPath\":\"saas/dataops/api/metric-flink\",\"type\":\"shell\"}],\"kind\":\"Deployment\",\"envKeyList\":[\"DB_HOST\",\"DB_PORT\",\"DB_USER\",\"DB_PASSWORD\",\"DB_NAME\",\"DATA_DB_HOST\",\"DATA_DB_PORT\",\"DATA_DB_USER\",\"DATA_DB_PASSWORD\",\"DATA_DB_PMDB_NAME=pmdb\",\"DATA_SKYW_HOST={{Global.STAGE_ID}}-dataops-skywalking-skywalking-helm-oap\",\"DATA_SKYW_PORT=11800\",\"DATA_SKYW_ENABLE=true\",\"KAFKA_ENDPOINT=prod-dataops-kafka.sreworks-dataops:9092\",\"DATA_ES_HOST\",\"DATA_ES_PORT\",\"DATA_ES_USER\",\"DATA_ES_PASSWORD\",\"DATA_DB_HEALTH_NAME=sw_saas_health\",\"MINIO_ENDPOINT=sreworks-minio.sreworks:9000\",\"MINIO_ACCESS_KEY\",\"MINIO_SECRET_KEY\",\"KAFKA_URL=prod-dataops-kafka.sreworks-dataops:9092\",\"ES_URL\",\"HEALTH_ENDPOINT={{Global.STAGE_ID}}-health-health.sreworks.svc.cluster.local:80\",\"VVP_ENDPOINT={{Global.STAGE_ID}}-dataops-ververica-platform-ververica-platform\"],\"repo\":{\"ciAccount\":\"public\",\"ciToken\":\"public\",\"dockerfilePath\":\"Dockerfile\",\"repo\":\"https://code.aliyun.com/sreworks_public/mirror.git\",\"repoDomain\":\"https:\",\"repoGroup\":\"\",\"repoPath\":\"saas/dataops/api/pmdb\",\"repoProject\":\"code.aliyun.com\",\"repoType\":\"THIRD_REPO\"},\"launch\":{\"gatewayAuthEnabled\":false,\"gatewayRoute\":\"/pmdb/**\",\"replicas\":1,\"servicePorts\":\"7001\"}}","description":"","gmtCreate":1665995842000,"namespaceId":"sreworks","appId":"dataops","name":"pmdb","options":"options:\n  kind: Deployment\n  containers:\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://code.aliyun.com/sreworks_public/mirror.git\n      dockerfileTemplate: Dockerfile\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/pmdb\n      branch: master\n    name: pmdb\n  env:\n  - DB_HOST\n  - DB_PORT\n  - DB_USER\n  - DB_PASSWORD\n  - DB_NAME\n  - DATA_DB_HOST\n  - DATA_DB_PORT\n  - DATA_DB_USER\n  - DATA_DB_PASSWORD\n  - DATA_DB_PMDB_NAME\n  - DATA_SKYW_HOST\n  - DATA_SKYW_PORT\n  - DATA_SKYW_ENABLE\n  - KAFKA_ENDPOINT\n  - DATA_ES_HOST\n  - DATA_ES_PORT\n  - DATA_ES_USER\n  - DATA_ES_PASSWORD\n  - DATA_DB_HEALTH_NAME\n  - MINIO_ENDPOINT\n  - MINIO_ACCESS_KEY\n  - MINIO_SECRET_KEY\n  - KAFKA_URL\n  - ES_URL\n  - HEALTH_ENDPOINT\n  - VVP_ENDPOINT\n  initContainers:\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://code.aliyun.com/sreworks_public/mirror.git\n      dockerfileTemplate: Dockerfile-db-migration\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/pmdb\n      branch: master\n    name: db-migration\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://code.aliyun.com/sreworks_public/mirror.git\n      dockerfileTemplate: Dockerfile\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/metric-flink\n      branch: master\n    name: metric-flink\n","arch":"","export":true,"stageId":"dev"},{"componentType":"K8S_MICROSERVICE","gmtModified":1670231782000,"microServiceId":"warehouse","microServiceExt":"{\"initContainerList\":[{\"dockerfilePath\":\"Dockerfile-db-migration\",\"name\":\"db-migration\",\"repoPath\":\"saas/dataops/api/warehouse\",\"type\":\"shell\"}],\"kind\":\"Deployment\",\"envKeyList\":[\"DATA_DB_WAREHOUSE_NAME=sw_saas_warehouse\",\"DATA_DB_HOST\",\"DATA_DB_PORT\",\"DATA_ES_HOST\",\"DATA_ES_PORT\",\"DATA_ES_USER\",\"DATA_ES_PASSWORD\",\"DATA_DB_USER\",\"DATA_DB_PASSWORD\"],\"repo\":{\"ciAccount\":\"public\",\"ciToken\":\"public\",\"dockerfilePath\":\"Dockerfile\",\"repo\":\"https://gitee.com/sreworks/sreworks.git\",\"repoDomain\":\"https:\",\"repoGroup\":\"\",\"repoPath\":\"saas/dataops/api/warehouse\",\"repoProject\":\"gitee.com\",\"repoType\":\"THIRD_REPO\"},\"launch\":{\"gatewayAuthEnabled\":false,\"gatewayRoute\":\"/warehouse/**\",\"replicas\":1,\"servicePorts\":\"7001\"}}","description":"","gmtCreate":1665987717000,"namespaceId":"sreworks","appId":"dataops","name":"warehouse","options":"options:\n  kind: Deployment\n  containers:\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://gitee.com/sreworks/sreworks.git\n      dockerfileTemplate: Dockerfile\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/warehouse\n      branch: master\n    name: warehouse\n  env:\n  - DATA_DB_WAREHOUSE_NAME\n  - DATA_DB_HOST\n  - DATA_DB_PORT\n  - DATA_ES_HOST\n  - DATA_ES_PORT\n  - DATA_ES_USER\n  - DATA_ES_PASSWORD\n  - DATA_DB_USER\n  - DATA_DB_PASSWORD\n  initContainers:\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://gitee.com/sreworks/sreworks.git\n      dockerfileTemplate: Dockerfile-db-migration\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/warehouse\n      branch: master\n    name: db-migration\n","arch":"","export":true,"stageId":"dev"},{"componentType":"K8S_MICROSERVICE","gmtModified":1671008988000,"microServiceId":"dataset","microServiceExt":"{\"initContainerList\":[{\"dockerfilePath\":\"Dockerfile-db-migration\",\"name\":\"db-migration\",\"repoPath\":\"saas/dataops/api/dataset\",\"type\":\"shell\"},{\"dockerfilePath\":\"Dockerfile-db-migration-datasource\",\"name\":\"db-migration-datasource\",\"repoPath\":\"saas/dataops/api/dataset\",\"type\":\"shell\"}],\"kind\":\"Deployment\",\"envKeyList\":[\"DATA_DB_PASSWORD\",\"DATA_DB_DATASET_NAME=sw_saas_dataset\",\"DATA_DB_PMDB_NAME=pmdb\",\"DATA_ES_HOST={{Global.STAGE_ID}}-dataops-elasticsearch-master\",\"DATA_ES_PORT=9200\",\"DATA_ES_INDEX=metricbeat-7.13.0\",\"DATA_DB_DATASOURCE_NAME=sw_saas_datasource\",\"DATA_SKYW_HOST={{Global.STAGE_ID}}-dataops-skywalking-skywalking-helm-oap\",\"DATA_SKYW_PORT=11800\",\"DATA_SKYW_ENABLE=true\",\"DATA_DB_HOST\",\"DATA_DB_PORT\",\"DATA_ES_USER\",\"DATA_ES_PASSWORD\",\"DATA_DB_USER\"],\"repo\":{\"ciAccount\":\"public\",\"ciToken\":\"public\",\"dockerfilePath\":\"Dockerfile\",\"repo\":\"https://gitee.com/sreworks/sreworks.git\",\"repoDomain\":\"https:\",\"repoGroup\":\"\",\"repoPath\":\"saas/dataops/api/dataset\",\"repoProject\":\"gitee.com\",\"repoType\":\"THIRD_REPO\"},\"launch\":{\"gatewayAuthEnabled\":false,\"gatewayRoute\":\"/dataset/**\",\"replicas\":1,\"servicePorts\":\"7001\"}}","description":"","gmtCreate":1665986979000,"namespaceId":"sreworks","appId":"dataops","name":"dataset","options":"options:\n  kind: Deployment\n  containers:\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://gitee.com/sreworks/sreworks.git\n      dockerfileTemplate: Dockerfile\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/dataset\n      branch: master\n    name: dataset\n  env:\n  - DATA_DB_PASSWORD\n  - DATA_DB_DATASET_NAME\n  - DATA_DB_PMDB_NAME\n  - DATA_ES_HOST\n  - DATA_ES_PORT\n  - DATA_ES_INDEX\n  - DATA_DB_DATASOURCE_NAME\n  - DATA_SKYW_HOST\n  - DATA_SKYW_PORT\n  - DATA_SKYW_ENABLE\n  - DATA_DB_HOST\n  - DATA_DB_PORT\n  - DATA_ES_USER\n  - DATA_ES_PASSWORD\n  - DATA_DB_USER\n  initContainers:\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://gitee.com/sreworks/sreworks.git\n      dockerfileTemplate: Dockerfile-db-migration\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/dataset\n      branch: master\n    name: db-migration\n  - build:\n      args: {}\n      dockerfileTemplateArgs: {}\n      repo: https://gitee.com/sreworks/sreworks.git\n      dockerfileTemplate: Dockerfile-db-migration-datasource\n      ciAccount: public\n      ciToken: public\n      repoPath: saas/dataops/api/dataset\n      branch: master\n    name: db-migration-datasource\n","arch":"","export":true,"stageId":"dev"}]}