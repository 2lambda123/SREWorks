{"options":{"layout":{},"logoImg":"/static/icons/data.png","swapp":"apiVersion: core.oam.dev/v1alpha2\nkind: ApplicationConfiguration\nspec:\n  parameterValues:\n    - name: CLUSTER_ID\n      value: master\n    - name: NAMESPACE_ID\n      value: sreworks-dataops\n    - name: STAGE_ID\n      value: prod\n    - name: ABM_CLUSTER\n      value: default-cluster\n    - name: CLOUD_TYPE\n      value: PaaS\n    - name: ENV_TYPE\n      value: PaaS\n    - name: APP_ID\n      value: dataops\n    - name: DATA_DB_PASSWORD\n      value: cb56b5is5e21_c359b42223\n  components:\n    - revisionName: INTERNAL_ADDON|productopsv2|_\n      dataInputs: []\n      dataOutputs: []\n      dependencies: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      parameterValues:\n        - name: TARGET_ENDPOINT\n          value: prod-flycore-paas-action\n          toFieldPaths:\n            - spec.targetEndpoint\n        - name: STAGE_ID\n          value: prod\n          toFieldPaths:\n            - spec.stageId\n    - revisionName: K8S_MICROSERVICE|dataset|_\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      traits:\n        - name: service.trait.abm.io\n          runtime: post\n          spec:\n            ports:\n              - protocol: TCP\n                port: 80\n                targetPort: 7001\n      parameterValues:\n        - name: KIND\n          value: Deployment\n          toFieldPaths:\n            - spec.kind\n        - name: REPLICAS\n          value: 1\n          toFieldPaths:\n            - spec.replicas\n        - name: Global.DATA_DB_DATASET_NAME\n          value: sw_saas_dataset\n        - name: Global.DATA_DB_DATASOURCE_NAME\n          value: sw_saas_datasource\n        - name: Global.DATA_DB_HOST\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-mysql'\n        - name: Global.DATA_DB_PORT\n          value: '3306'\n        - name: Global.DATA_DB_USER\n          value: root\n        - name: Global.DATA_ES_HOST\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master'\n        - name: Global.DATA_ES_PORT\n          value: '9200'\n        - name: Global.DATA_ES_INDEX\n          value: metricbeat-7.13.0\n        - name: Global.DATA_SKYW_HOST\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-skywalking-oap'\n        - name: Global.DATA_SKYW_PORT\n          value: '11800'\n        - name: Global.DATA_SKYW_ENABLE\n          value: 'true'\n        - name: Global.DATA_DB_PMDB_NAME\n          value: pmdb\n    - revisionName: K8S_MICROSERVICE|pmdb|_\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      traits:\n        - name: service.trait.abm.io\n          runtime: post\n          spec:\n            ports:\n              - protocol: TCP\n                port: 80\n                targetPort: 7001\n      parameterValues:\n        - name: KIND\n          value: Deployment\n          toFieldPaths:\n            - spec.kind\n        - name: REPLICAS\n          value: 1\n          toFieldPaths:\n            - spec.replicas\n        - name: Global.DATA_DB_PMDB_NAME\n          value: pmdb\n        - name: Global.DATA_DB_HOST\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-mysql'\n        - name: Global.DATA_DB_PORT\n          value: '3306'\n        - name: Global.DATA_DB_USER\n          value: root\n        - name: Global.DATA_SKYW_HOST\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-skywalking-oap'\n        - name: Global.DATA_SKYW_PORT\n          value: '11800'\n        - name: Global.DATA_SKYW_ENABLE\n          value: 'true'\n        - name: Global.KAFKA_ENDPOINT\n          value: sreworks-kafka.sreworks:9092\n    - revisionName: K8S_MICROSERVICE|warehouse|_\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      traits:\n        - name: service.trait.abm.io\n          runtime: post\n          spec:\n            ports:\n              - protocol: TCP\n                port: 80\n                targetPort: 7001\n      parameterValues:\n        - name: KIND\n          value: Deployment\n          toFieldPaths:\n            - spec.kind\n        - name: REPLICAS\n          value: 1\n          toFieldPaths:\n            - spec.replicas\n        - name: Global.DATA_DB_WAREHOUSE_NAME\n          value: sw_saas_warehouse\n        - name: Global.DATA_DB_HOST\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-mysql'\n        - name: Global.DATA_DB_PORT\n          value: '3306'\n        - name: Global.DATA_DB_USER\n          value: root\n    - revisionName: HELM|mysql|_\n      dataOutputs: []\n      traits: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            global:\n              storageClass: alicloud-disk-available\n            primary:\n              service:\n                type: ClusterIP\n              persistence:\n                size: 200Gi\n              extraFlags: '--max-connect-errors=1000 --max_connections=10000'\n            replication:\n              enabled: false\n            image:\n              registry: sreworks-registry.cn-beijing.cr.aliyuncs.com\n              repository: mirror/mysql\n              tag: 8.0.22-debian-10-r44\n            auth:\n              rootPassword: bGuwsAWQ222M6Klls2\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|elasticsearch|_\n      traits: \n      - name: gateway.trait.abm.io\n        runtime: post\n        spec:\n          path: \"/elasticsearch/**\"\n          servicePort: 9200\n          serviceName: \"{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}\"\n      dataOutputs: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: name\n          value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch'\n          toFieldPaths:\n            - spec.name\n        - name: values\n          value:\n            clusterName: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch'\n            image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/elasticsearch\n            imageTag: 7.13.0-with-plugins\n            volumeClaimTemplate:\n              accessModes:\n                - ReadWriteOnce\n              storageClassName: alicloud-disk-available\n              resources:\n                requests:\n                  storage: 500Gi\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|grafana|_\n      traits: []\n      dataOutputs: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            adminUser: admin\n            adminPassword: sreworks123456\n            grafana.ini:\n              security:\n                allow_embedding: true\n              server:\n                root_url: /gateway/dataops-grafana/\n                serve_from_sub_path: true\n              auth.anonymous:\n                enabled: true\n            image:\n              repository: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/grafana\n              tag: 8.1.0\n            plugins:\n              - marcusolsson-json-datasource\n            datasources:\n              datasources.yaml:\n                apiVersion: 1\n                datasources:\n                  - name: elasticsearch-metricbeat\n                    type: elasticsearch\n                    url: http://{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}:9200\n                    database: '[metricbeat-7.13.0]*'\n                    access: proxy\n                    isDefault: true\n                    jsonData:\n                      interval: Yearly\n                      timeField: '@timestamp'\n                      esVersion: 7.0.0\n                  - name: elasticsearch-filebeat\n                    type: elasticsearch\n                    url: http://{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}:9200\n                    database: '[filebeat-7.13.0]*'\n                    access: proxy\n                    isDefault: false\n                    jsonData:\n                      interval: Yearly\n                      timeField: '@timestamp'\n                      esVersion: 7.0.0\n                      logMessageField: message\n                      logLevelField: fields.level\n                  - name: dataset\n                    type: marcusolsson-json-datasource\n                    url: http://{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-dataset.{{ Global.NAMESPACE_ID }}\n                    access: proxy\n                    isDefault: false\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|kibana|_\n      dataOutputs: []\n      traits: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            elasticsearchHosts: http://{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local:9200\n            ingress:\n              enabled: false\n              annotations: {}\n              hosts:\n                - host: kibana.xxx\n                  paths:\n                    - path: /\n              tls: []\n            image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/kibana\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|metricbeat|_\n      traits: []\n      dataOutputs: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/metricbeat\n            daemonset:\n              annotations:\n                name: metricbeat\n              labels:\n                k8s-app: metricbeat\n              enabled: true\n              extraEnvs:\n                - name: ELASTICSEARCH_HOSTS\n                  value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local'\n                - name: NODE_NAME\n                  valueFrom:\n                    fieldRef:\n                      fieldPath: spec.nodeName\n                - name: NODE_IP\n                  valueFrom:\n                    fieldRef:\n                      fieldPath: status.hostIP\n              hostNetworking: true\n              metricbeatConfig:\n                metricbeat.yml: |\n                  metricbeat.modules:\n                  - module: kubernetes\n                    metricsets:\n                      - container\n                      - node\n                      - pod\n                      - system\n                      - volume\n                    period: 1m\n                    host: \"${NODE_NAME}\"\n                    hosts: [\"https://${NODE_IP}:10250\"]\n                    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n                    ssl.verification_mode: \"none\"\n                    # If using Red Hat OpenShift remove ssl.verification_mode entry and\n                    # uncomment these settings:\n                    ssl.certificate_authorities:\n                      - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n                    processors:\n                    - add_kubernetes_metadata: ~\n                  - module: kubernetes\n                    enabled: true\n                    metricsets:\n                      - event\n                  - module: kubernetes\n                    metricsets:\n                      - proxy\n                    period: 1m\n                    host: ${NODE_NAME}\n                    hosts: [\"localhost:10249\"]\n                  - module: system\n                    period: 1m\n                    metricsets:\n                      - cpu\n                      - load\n                      - memory\n                      - network\n                      - process\n                      - process_summary\n                    cpu.metrics: [percentages, normalized_percentages]\n                    processes: ['.*']\n                    process.include_top_n:\n                      by_cpu: 5\n                      by_memory: 5\n                  - module: system\n                    period: 1m\n                    metricsets:\n                      - filesystem\n                      - fsstat\n                    processors:\n                    - drop_event.when.regexp:\n                        system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'\n\n                  metricbeat.autodiscover:\n                    providers:\n                      - type: kubernetes\n                        scope: cluster\n                        node: ${NODE_NAME}\n                        resource: service\n                        templates:\n                          - condition:\n                              equals:\n                                kubernetes.labels.sreworks-telemetry: metric\n                            config:\n                              - module: http\n                                metricsets:\n                                  - json\n                                period: 1m\n                                hosts: [\"http://${data.host}:10080\"]\n                                namespace: \"${data.kubernetes.namespace}#${data.kubernetes.service.name}\"\n                                path: \"/\"\n                                method: \"GET\"\n\n                      - type: kubernetes\n                        scope: cluster\n                        node: ${NODE_NAME}\n                        unique: true\n                        templates:\n                          - config:\n                              - module: kubernetes\n                                hosts: [\"kube-state-metrics.arms-prom.svc.cluster.local:8080\"]\n                                period: 1m\n                                add_metadata: true\n                                metricsets:\n                                  - state_node\n                                  - state_deployment\n                                  - state_daemonset\n                                  - state_replicaset\n                                  - state_pod\n                                  - state_container\n                                  - state_cronjob\n                                  - state_resourcequota\n                                  - state_statefulset\n                                  - state_service\n\n                  processors:\n                    - add_cloud_metadata:\n\n                  output.logstash:\n                    hosts: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-logstash-logstash:5044'\n              resources:\n                requests:\n                  cpu: 100m\n                  memory: 100Mi\n                limits:\n                  cpu: 1000m\n                  memory: 500Mi\n            deployment:\n              enabled: false\n            kube_state_metrics:\n              enabled: false\n            clusterRoleRules:\n              - apiGroups:\n                  - ''\n                resources:\n                  - nodes\n                  - namespaces\n                  - events\n                  - pods\n                verbs:\n                  - get\n                  - list\n                  - watch\n              - apiGroups:\n                  - extensions\n                resources:\n                  - replicasets\n                verbs:\n                  - get\n                  - list\n                  - watch\n              - apiGroups:\n                  - apps\n                resources:\n                  - statefulsets\n                  - deployments\n                  - replicasets\n                verbs:\n                  - get\n                  - list\n                  - watch\n              - apiGroups:\n                  - ''\n                resources:\n                  - nodes/stats\n                  - nodes\n                  - services\n                  - endpoints\n                  - pods\n                verbs:\n                  - get\n                  - list\n                  - watch\n              - nonResourceURLs:\n                  - /metrics\n                verbs:\n                  - get\n              - apiGroups:\n                  - coordination.k8s.io\n                resources:\n                  - leases\n                verbs:\n                  - '*'\n            serviceAccount: metricbeat-sa\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|filebeat|_\n      traits: []\n      dataOutputs: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/filebeat\n            daemonset:\n              annotations:\n                name: filebeat\n              labels:\n                k8s-app: filebeat\n              enabled: true\n              extraEnvs:\n                - name: ELASTICSEARCH_HOSTS\n                  value: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local'\n                - name: NODE_NAME\n                  valueFrom:\n                    fieldRef:\n                      fieldPath: spec.nodeName\n              hostNetworking: true\n              filebeatConfig:\n                filebeat.yml: |\n                  filebeat.autodiscover:\n                    providers:\n                      - type: kubernetes\n                        node: ${NODE_NAME}\n                        resource: pod\n                        scope: node\n                        templates:\n                          - condition:\n                              equals:\n                                kubernetes.labels.sreworks-telemetry: log\n                            config:\n                              - type: container\n                                paths:\n                                  - /var/log/containers/*${data.kubernetes.container.id}.log\n                                multiline:\n                                  type: pattern\n                                  pattern: '^(\\[)?20\\d{2}-(1[0-2]|0?[1-9])-(0?[1-9]|[1-2]\\d|30|31)'\n                                  negate: true\n                                  match: after\n                                processors:\n                                  - add_kubernetes_metadata:\n                                      host: ${NODE_NAME}\n                                      matchers:\n                                      - logs_path:\n                                          logs_path: \"/var/log/containers/\"\n\n                  output.elasticsearch:\n                    hosts: '${ELASTICSEARCH_HOSTS:{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master:9200}'\n            deployment:\n              enabled: false\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|skywalking|_\n      dataOutputs: []\n      traits: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            oap:\n              image:\n                tag: 8.5.0-es7\n              storageType: elasticsearch7\n            ui:\n              image:\n                tag: 8.5.0\n            elasticsearch:\n              enabled: false\n              config:\n                host: '{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local'\n                port:\n                  http: 9200\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|mongodb|_\n      dataOutputs: []\n      traits: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            auth:\n              enabled: true\n              rootPassword: '12345'\n            persistence:\n              enabled: true\n              existingClaim: ''\n              storageClass: alicloud-disk-available\n              accessModes:\n                - ReadWriteOnce\n              size: 200Gi\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|ververica-platform|_\n      dataInputs: []\n      dataOutputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            acceptCommunityEditionLicense: true\n            vvp:\n              registry: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror\n              persistence:\n                type: local\n              blobStorage:\n                baseUri: s3://vvp\n                s3:\n                  endpoint: http://sreworks-minio.sreworks:9000\n              globalDeploymentDefaults: |\n                spec:\n                  state: RUNNING\n                  template:\n                    spec:\n                      resources:\n                        jobmanager:\n                          cpu: 0.5\n                          memory: 1G\n                        taskmanager:\n                          cpu: 0.5\n                          memory: 1G\n                      flinkConfiguration:\n                        state.backend: filesystem\n                        taskmanager.memory.managed.fraction: 0.0 # no managed memory needed for filesystem statebackend\n                        high-availability: vvp-kubernetes\n                        metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter\n                        execution.checkpointing.interval: 10s\n                        execution.checkpointing.externalized-checkpoint-retention: RETAIN_ON_CANCELLATION\n              sqlService:\n                pool:\n                  coreSize: 1\n                  maxSize: 1\n            blobStorageCredentials:\n              s3:\n                accessKeyId: XmizyTRKhgYTrVkK\n                secretAccessKey: Df229gtwZ4bssMzK23VJXq9vrGqpxdHA\n            persistentVolume:\n              enabled: true\n              accessModes:\n                - ReadWriteOnce\n              annotations: {}\n              size: 50Gi\n              storageClass: alicloud-disk-available\n              subPath: ''\n          toFieldPaths:\n            - spec.values\n    - revisionName: HELM|logstash|_\n      traits: []\n      dataOutputs: []\n      dataInputs: []\n      scopes:\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Cluster\n            name: '{{ Global.CLUSTER_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Namespace\n            name: '{{ Global.NAMESPACE_ID }}'\n        - scopeRef:\n            apiVersion: apps.abm.io/v1\n            kind: Stage\n            name: '{{ Global.STAGE_ID }}'\n      dependencies: []\n      parameterValues:\n        - name: values\n          value:\n            image: sreworks-registry.cn-beijing.cr.aliyuncs.com/mirror/logstash\n            logstashPipeline:\n              logstash.conf: |\n                input {\n                  beats {\n                    port => 5044\n                  }\n                }\n                output {\n                  kafka {\n                    bootstrap_servers => \"sreworks-kafka.sreworks.svc.cluster.local:9092\"\n                    codec => json\n                    topic_id => \"%{[@metadata][beat]}-%{[@metadata][version]}\"\n                  }\n                  elasticsearch {\n                    hosts => [\"${ELASTICSEARCH_HOSTS:{{ Global.STAGE_ID }}-{{ Global.APP_ID }}-elasticsearch-master.{{ Global.NAMESPACE_ID }}.svc.cluster.local:9200}\"]\n                    index => \"%{[@metadata][beat]}-%{[@metadata][version]}\"\n                  }\n                }\n            volumeClaimTemplate:\n              accessModes:\n                - ReadWriteOnce\n              storageClassName: alicloud-disk-available\n              resources:\n                requests:\n                  storage: 50Gi\n            service:\n              type: ClusterIP\n              loadBalancerIP: ''\n              ports:\n                - name: beats\n                  port: 5044\n                  protocol: TCP\n                  targetPort: 5044\n                - name: http\n                  port: 8080\n                  protocol: TCP\n                  targetPort: 8080\n          toFieldPaths:\n            - spec.values\n","docsUrl":"","builtIn":1,"name":"数据运维平台","description":"","source":"swadmin","category":"管理","version":"v2","isDevelopment":1}}